function [pixelBinary, pixels] = object_pixels(filename,start_frame,end_frame,is_circular)
  
    fileName = filename;
    source=VideoReader(fileName);
    global height
    height=source.H;
    global width
    width=source.W;
    
    % Get image when the object is moving the fastest
    maxOpticalFlowCoords = farneback(filename,start_frame,end_frame);
    fr=read(source,maxOpticalFlowCoords(3));
    Im=rgb2gray(fr);

    if (~is_circular) % Assumes there is a solid line around the object
       
        % Detect edges
        global edges
        edges = edge(Im,'Canny', [0.3]);
        imshow(edges);
        hold on
        plot(maxOpticalFlowCoords(1),maxOpticalFlowCoords(2), 'ro', 'MarkerSize', 1, 'LineWidth', 1);
        
        % Remove edges in which the corresponding optical flow isn't above a certain threshold
        movementThreshold = 1;
        opticFlow = opticalFlowFarneback("NeighborhoodSize",16, "FilterSize", 40);
        flow = estimateFlow(opticFlow, Im);
        flowMag = flow.Magnitude;
        for i = 1:height
            for j = 1:width
                if flowMag(i,j) < movementThreshold
                    edges(i,j) = 0;
                end
            end
        end
             
        global pixelBinary
        pixelBinary = uint8(zeros(height, width));
        
        % Fill in the shape, crop the sides, remove any lines in the middle of the shape
        recursiveFill(ceil(maxOpticalFlowCoords(2)),ceil(maxOpticalFlowCoords(1)));
        [pixelBinary, yOffset, xOffset] = cropImage(pixelBinary);
        removeLines();
        pixels = fr(yOffset+1:(yOffset+size(pixelBinary,1)),xOffset+1:(xOffset+size(pixelBinary,2)),:);
        
        figure
        imshow(pixelBinary);
        figure
        imshow(pixels)     
       
    else % If the object is circular, and there isn't a clear solid line around the object

        edges = edge(Im,'Canny', [0.1]);
        imshow(edges);
        hold on
        plot(maxOpticalFlowCoords(1),maxOpticalFlowCoords(2), 'ro', 'MarkerSize', 1, 'LineWidth', 1);

        center_y = ceil(maxOpticalFlowCoords(2));
        center_x = ceil(maxOpticalFlowCoords(1));

        radius = 5;
        prev_num_edge_pixels = -1;
        num_edge_pixels = 0;

        % Iteratively increase the radius around the middle point until
        % we've surrounded the shape

        while num_edge_pixels > prev_num_edge_pixels || num_edge_pixels == 0
            radius = radius + 1;
            prev_num_edge_pixels = num_edge_pixels;
            num_edge_pixels = sum(sum(edges(center_y-radius:center_y+radius,center_x-radius:center_x+radius)));
        end

        % Get the edges that belong to the shape 
        shape_edges = edges(center_y-radius:center_y+radius,center_x-radius:center_x+radius);
        [shape_edges, yOffset, xOffset] = cropImage(shape_edges);

        start_x = center_x - radius + xOffset;
        start_y = center_y - radius + yOffset;
        pixels = fr(start_y:start_y+length(shape_edges),start_x:start_x+length(shape_edges),:);
        figure;
        imshow(pixels)
        size(pixels)
        pixelBinary = imbinarize(fspecial('disk', length(shape_edges)/2)); % ChatGPT taught me this
        figure;
        imshow(pixelBinary)
        size(pixelBinary)
    end


    % Create pixelBinary, which indicates the shape of the object by
    % recursively "filling" the area surrounded by the object's edges
    function recursiveFill(y,x)

        for k = 1:4
            if k == 1
                first = y+1;
                second = x;
            elseif k == 2
                first = y-1;
                second = x;
            elseif k == 3
                first = y;
                second = x+1;
            elseif k == 4
                first = y;
                second = x-1;
            end
            if edges(first, second) == 0 && pixelBinary(first, second) == 0
                pixelBinary(first,second) = 1;
                recursiveFill(first, second);
            end
        end
    end
    
    % Crop pixelBinary so it's only the shape of the object
    function [imageToCrop, yOffset, xOffset] = cropImage(imageToCrop)

        yOffset = 0;
        xOffset = 0;
        while(max(imageToCrop(:,end)) == 0)
            imageToCrop(:,end) = [];
        end
        while(max(imageToCrop(end,:)) == 0)
            imageToCrop(end,:) = [];
        end
        while(max(imageToCrop(:,1)) == 0)
            imageToCrop(:,1) = [];
            xOffset = xOffset + 1;
        end
        while(max(imageToCrop(1,:)) == 0)
            imageToCrop(1,:) = [];
            yOffset = yOffset + 1;
        end
    end
    
    % Clever function that removes any lines in the shape
    function removeLines()

        for i = 1:size(pixelBinary,1)
            if max(pixelBinary(i,:) > 0)
                startIndex = 1;
                endIndex = size(pixelBinary,2);
                startInObject = false;
                endInObject = false;
                for j = 1:size(pixelBinary,2)
                    if (pixelBinary(i,startIndex) == 1)
                        startInObject = true;
                    end
                    if (pixelBinary(i,endIndex) == 1)
                        endInObject = true;
                    end
                    if startInObject && ~endInObject
                        endIndex = endIndex - 1;
                    end
                    if ~startInObject && endInObject
                        startIndex = startIndex + 1;
                    end
                    if startInObject == endInObject
                        startIndex = startIndex + 1;
                        endIndex = endIndex - 1;
                    end
                    if startInObject && endInObject             
                        pixelBinary(i,startIndex) = 1;
                        pixelBinary(i,endIndex) = 1;
                    end
                    if startIndex >= endIndex
                        break
                    end
                end
            end
        end
    end
end
